const BaseController=require("@partFramework/baseController");const User=require("../../models/user");const{after}=require("@partFramework/decorators");const{passwordDeleter}=require("../../decorators/after");exports.controller=class UserController extends BaseController{#userService;#utilsService;constructor(core,schema,config,UserService,UtilsService){super(core,schema,config);this.#userService=UserService;this.#utilsService=UtilsService}async create(body){const newUser=new User(this.#utilsService.getUUID(),body.username,body.email,this.#utilsService.hashPassword(body.password));return this.#userService.create(newUser)}async readById(params){return this.#userService.readById(params.id)}async update(body){const oldUserData=await this.#userService.readById(body.id);const user=oldUserData.data;if(!user){return oldUserData}const updatedUser=new User(body.id,body.username||oldUserData.username,body.email||oldUserData.email,password?this.#utilsService.hashPassword(body.password):oldUserData.password);return this.#userService.update(updatedUser)}async readAll(){const __thisClass=this;const __thisFunction=async function(){return this.#userService.readAll()}.bind(__thisClass);function _after(...args){return after.bind(__thisClass)(passwordDeleter).bind(__thisClass)(__thisFunction,args,{"name":"readAll","arguments":[],"isAsync":true,"isDecorator":false,"type":"function"})}return _after()}async delete(params){return this.#userService.delete(params.id)}};exports.introduceToLoader=BaseController.exportedProperties(require("./schema"),require("./config"));
//# sourceMappingURL=main.transpiled.min.js.map